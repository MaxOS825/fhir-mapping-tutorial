Index: src/org/hl7/fhir/r4/utils/FHIRPathEngine.java
===================================================================
--- src/org/hl7/fhir/r4/utils/FHIRPathEngine.java	(revision 12078)
+++ src/org/hl7/fhir/r4/utils/FHIRPathEngine.java	(working copy)
@@ -10,7 +10,12 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.hl7.fhir.exceptions.DefinitionException;
+import org.hl7.fhir.exceptions.FHIRException;
+import org.hl7.fhir.exceptions.PathEngineException;
+import org.hl7.fhir.exceptions.UcumException;
 import org.hl7.fhir.r4.context.IWorkerContext;
+import org.hl7.fhir.r4.elementmodel.Element;
 import org.hl7.fhir.r4.model.Base;
 import org.hl7.fhir.r4.model.BooleanType;
 import org.hl7.fhir.r4.model.DateTimeType;
@@ -37,10 +42,6 @@
 import org.hl7.fhir.r4.model.TypeDetails.ProfiledType;
 import org.hl7.fhir.r4.utils.FHIRLexer.FHIRLexerException;
 import org.hl7.fhir.r4.utils.FHIRPathEngine.IEvaluationContext.FunctionDetails;
-import org.hl7.fhir.exceptions.DefinitionException;
-import org.hl7.fhir.exceptions.FHIRException;
-import org.hl7.fhir.exceptions.PathEngineException;
-import org.hl7.fhir.exceptions.UcumException;
 import org.hl7.fhir.utilities.Utilities;
 import org.hl7.fhir.utilities.ucum.Decimal;
 
@@ -875,13 +876,25 @@
   }
 
 	private List<Base> execute(ExecutionContext context, List<Base> focus, ExpressionNode exp, boolean atEntry) throws FHIRException {
-//    System.out.println("Evaluate {'"+exp.toString()+"'} on "+focus.toString());
+    System.out.println("Evaluate {'"+exp.toString()+"'} on "+focus.toString());
     List<Base> work = new ArrayList<Base>();
     switch (exp.getKind()) {
     case Name:
-      if (atEntry && exp.getName().equals("$this"))
-        work.add(context.getThisItem());
-      else
+    	boolean found=false;
+      if (atEntry) {
+      	if (exp.getName().equals("$this")) {
+      		work.add(context.getThisItem());
+      		found = true;
+      	}
+      	else
+      		for (Base item : focus) {
+          	if (exp.getName().equals(((Element) item).getName())) {
+          		work.add(item);      			
+          		found = true;
+          	}
+      		}
+      }
+      if (!found)
         for (Base item : focus) {
           List<Base> outcome = execute(context, item, exp, atEntry);
           for (Base base : outcome)
@@ -2478,7 +2491,8 @@
 
 	private List<Base> funcMatches(ExecutionContext context, List<Base> focus, ExpressionNode exp) throws FHIRException {
     List<Base> result = new ArrayList<Base>();
-    String sw = convertToString(execute(context, focus, exp.getParameters().get(0), true));
+//    String sw = convertToString(execute(context, focus, exp.getParameters().get(0), true));
+    String sw = exp.getParameters().get(0).toString();
 
     if (focus.size() == 1 && !Utilities.noString(sw)) {
       String st = convertToString(focus.get(0));
Index: src/org/hl7/fhir/r4/utils/StructureMapUtilities.java
===================================================================
--- src/org/hl7/fhir/r4/utils/StructureMapUtilities.java	(revision 12078)
+++ src/org/hl7/fhir/r4/utils/StructureMapUtilities.java	(working copy)
@@ -156,9 +156,9 @@
 
     @Override
     public FunctionDetails resolveFunction(String functionName) {
-      return null; // throw new Error("Not Implemented Yet");
+      throw new Error("Not Implemented Yet " +functionName);
     }
-
+ 
     @Override
     public TypeDetails checkFunction(Object appContext, String functionName, List<TypeDetails> parameters) throws PathEngineException {
       throw new Error("Not Implemented Yet");
@@ -1683,6 +1683,11 @@
 	    case ESCAPE : 
 	      throw new Error("Rule \""+ruleId+"\": Transform "+tgt.getTransform().toCode()+" not supported yet");
 	    case CAST :
+	    	String variable = getParamString(vars, tgt.getParameter().get(0));
+	    	String castto = getParamStringNoNull(vars, tgt.getParameter().get(1), tgt.toString());
+	    	if ("integer".equals(castto)) {
+	    		return new IntegerType(variable);
+	    	}
 	      throw new Error("Rule \""+ruleId+"\": Transform "+tgt.getTransform().toCode()+" not supported yet");
 	    case APPEND : 
 	      throw new Error("Rule \""+ruleId+"\": Transform "+tgt.getTransform().toCode()+" not supported yet");
